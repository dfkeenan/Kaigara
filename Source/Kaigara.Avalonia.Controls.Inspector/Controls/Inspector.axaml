<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:k="https://github.com/dfkeenan/Kaigara"
        xmlns:controls="using:Kaigara.Avalonia.Controls"
        xmlns:np="using:Kaigara.Avalonia.Controls.InspectorProviders"
        xmlns:n="using:Kaigara.Avalonia.Controls.InspectorNodes"
        xmlns:s="using:System">
    <Design.PreviewWith>
        <controls:Inspector />
    </Design.PreviewWith>

    <Style Selector="ListBox.checklist ListBoxItem">
        <Setter Property="Template">
            <ControlTemplate>
                <DockPanel Background="Transparent">
                    <CheckBox DockPanel.Dock="Left" IsChecked="{TemplateBinding IsSelected}" IsHitTestVisible="false" Focusable="false" />
                    <ContentPresenter Name="PART_ContentPresenter"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            Content="{TemplateBinding Content}"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Padding="{TemplateBinding Padding}"
                                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                </DockPanel>
            </ControlTemplate>
        </Setter>
    </Style>

    <Style Selector="ListBox.checklist ListBoxItem:selected /template/ ContentPresenter">
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style Selector=".ConstructableTypes MenuItem">
        <Setter Property="Header" Value="{Binding Converter={x:Static k:TypeToSimpleNameConverter.Instance}}"/>
        <Setter Property="Items" Value="{Binding Items}"/>
        <Setter Property="Command" Value="{Binding $parent[Button].DataContext.CreateInstance}"/>
        <Setter Property="CommandParameter" Value="{Binding}"/>
    </Style>

    <Style Selector="controls|InspectorItem Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    
    <Style Selector="controls|InspectorItem > :not(controls|InspectorItem) Button:pointerover">
        <Setter Property="Background" Value="{DynamicResource ThemeControlMidBrush}" />
    </Style>
    <Style Selector="controls|InspectorItem:selected > :not(controls|InspectorItem) Button:pointerover">
        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush2}" />
    </Style>

    <Style Selector="controls|InspectorItem:selected > :not(controls|InspectorItem) Button:pressed">
        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush3}" />
    </Style>

    <Style Selector="controls|Inspector">
        <!-- Set Defaults -->
        <Setter Property="Template">
            <ControlTemplate>
                <controls:InspectorItemsControl Name="PART_NodeItems" Items="{TemplateBinding Nodes}">
                    <controls:InspectorItemsControl.DataTemplates>
                        <np:MemberInspectorNodeProvider MemberType="s:String">
                            <TextBox Text="{Binding Value}" IsReadOnly="{Binding IsReadOnly}" />
                        </np:MemberInspectorNodeProvider>
                        <np:MemberInspectorNodeProvider MemberType="s:Boolean">
                            <CheckBox IsChecked="{Binding Value}" IsEnabled="{Binding !IsReadOnly}" />
                        </np:MemberInspectorNodeProvider>
                        <np:NumericMemberInspectorNodeProvider >
                            <StackPanel >
                                <controls:MathUpDown
                                               Value="{Binding Value}"
                                               FormatString="{Binding FormatString}"
                                               Minimum="{Binding MinValue}"
                                               Maximum="{Binding MaxValue}"
                                               Increment="{Binding Increment}"
                                               ShowButtonSpinner="{Binding !HasRange}"
                                               ClipValueToMinMax="True"
                                               IsReadOnly="{Binding IsReadOnly}"/>
                                <Slider IsVisible="{Binding HasRange}"
                                        IsEnabled="{Binding !IsReadOnly}"
                                        Value="{Binding Value}"
                                        Minimum="{Binding MinValue}"
                                        Maximum="{Binding MaxValue}"
                                        SmallChange="{Binding Increment}"/>
                            </StackPanel>
                        </np:NumericMemberInspectorNodeProvider>

                        <np:EnumMemberInspectorNodeProvider>
                            <ComboBox SelectedItem="{Binding Value}" Items="{Binding EnumValues}" IsEnabled="{Binding !IsReadOnly}" >
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding ,Converter={x:Static k:EnumToStringConverter.Instance}}" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </np:EnumMemberInspectorNodeProvider>

                        <np:EnumMemberInspectorNodeProvider FlagsEnum="True">
                            <Grid>
                                <ToggleButton x:Name="DropDownToggle" Padding="2">
                                    <TextBlock Text="{Binding Value ,Converter={x:Static k:EnumFlagsToStringConverter.Instance}}" HorizontalAlignment="Stretch" TextWrapping="Wrap" />
                                </ToggleButton>
                                <Popup IsOpen="{Binding IsChecked,ElementName=DropDownToggle, Mode=TwoWay}" StaysOpen="False" >
                                    <DockPanel Margin="2">
                                        <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" Spacing="2" Margin="0,2,0,0">
                                            <Button Content="All" Command="{Binding SelectAll}" />
                                            <Button Content="None" Command="{Binding SelectNone}" />
                                            <Button Content="Invert" Command="{Binding SelectInverse}" />
                                        </StackPanel>
                                        <ListBox Classes="checklist"
                                                 Selection="{Binding Selection}"
                                                 Items="{Binding EnumValues}"
                                                 SelectionMode="Multiple,Toggle" IsEnabled="{Binding !IsReadOnly}">
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding ,Converter={x:Static k:EnumToStringConverter.Instance}}"/>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                    </DockPanel>
                                </Popup>
                            </Grid>
                        </np:EnumMemberInspectorNodeProvider>



                        <np:MemberInspectorNodeProvider MemberType="s:Object" ItemsSource="{Binding ValueNode.Children}">
                            <Panel>
                                <Grid IsVisible="{Binding !HasValue}" ColumnDefinitions="Auto,*" Margin="4" >
                                    <TextBlock Grid.Column="0" Text="{Binding MemberType, Converter={x:Static k:TypeToSimpleNameConverter.Instance}}" VerticalAlignment="Center" />
                                    <Button  Grid.Column="1" HorizontalAlignment="Right" Name="ConstructorToggle" ToolTip.Tip="Create" IsVisible="{Binding IsConstructable}"
                                             Classes="ConstructableTypes">
                                        <Button.Flyout>
                                            <MenuFlyout Placement="BottomEdgeAlignedRight" Items="{Binding ConstructableTypes}" />
                                        </Button.Flyout>
                                        <Image Width="16" Height="16" Source="{DynamicResource VSImageLib.Add_16x}">
                                        </Image>
                                    </Button>
                                </Grid>
                                <ContentControl IsVisible="{Binding HasValue}" Content="{Binding ValueNode}" />
                            </Panel>
                        </np:MemberInspectorNodeProvider>

                        <np:CollectionInspectorNodeProvider >
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Command="{Binding AddNewItem}" ToolTip.Tip="Add Item">
                                    <Image Width="16" Height="16" Source="{DynamicResource VSImageLib.Add_16x}">
                                    </Image>
                                </Button>
                            </StackPanel>
                        </np:CollectionInspectorNodeProvider>

                        <np:ObjectInspectorNodeProvider ItemsSource="{Binding Children}" >
                            <Grid></Grid>
                            <!--<TextBlock>Place holder</TextBlock>-->
                        </np:ObjectInspectorNodeProvider>
                        <TreeDataTemplate DataType="n:CategoryInspectorNode" ItemsSource="{Binding Children}">
                            <Grid></Grid>
                        </TreeDataTemplate>
                    </controls:InspectorItemsControl.DataTemplates>
                </controls:InspectorItemsControl>
            </ControlTemplate>
        </Setter>
    </Style>
</Styles>
